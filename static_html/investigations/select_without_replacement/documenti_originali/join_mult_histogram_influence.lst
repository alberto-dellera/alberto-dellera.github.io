SQL> 
SQL> -- end of initialization section
SQL> 
SQL> drop table t2;

Table dropped.

SQL> drop table t1;

Table dropped.

SQL> 
SQL> purge recyclebin;

Recyclebin purged.

SQL> 
SQL> -- max 250
SQL> define num_rows_t1=100
SQL> -- max 250
SQL> define num_rows_t2=100
SQL> 
SQL> define num_dist_t1_x = 2
SQL> define num_dist_t2_x = 10
SQL> define num_dist_t1_y = 17
SQL> define num_dist_t2_y = 32
SQL> define cbo_card_filt_t1=50
SQL> define cbo_card_filt_t2=100
SQL> 
SQL> create table t1 as
  2  select trunc(dbms_random.value(0, &num_dist_t1_x.)) x, trunc(dbms_random.value(0,  &num_dist_t1_y.)) y, rownum filter from dual connect by level <= &num_rows_t1. ;

Table created.

SQL> 
SQL> --update t1 set x = least (rownum, &num_dist_t1_x.);
SQL> --update t1 set y = least (rownum, &num_dist_t1_y.);
SQL> 
SQL> create table t2 as
  2  select trunc(dbms_random.value(0, &num_dist_t2_x.)) x, trunc(dbms_random.value(0,  &num_dist_t2_y.)) y, rownum filter from dual connect by level <= &num_rows_t2. ;

Table created.

SQL> 
SQL> --update t2 set x = least (rownum, &num_dist_t2_x.);
SQL> --update t2 set y = least (rownum, &num_dist_t2_y.);
SQL> 
SQL> 
SQL> 
SQL> -- collect baseline stats, build an histogram on the "filter" column
SQL> exec dbms_stats.gather_table_stats (user, 't1', cascade=>true, method_opt => 'for columns x size 1, y size 1, filter size 254', estimate_percent=>100);

PL/SQL procedure successfully completed.

SQL> exec dbms_stats.gather_table_stats (user, 't2', cascade=>true, method_opt => 'for columns x size 1, y size 1, filter size 254', estimate_percent=>100);

PL/SQL procedure successfully completed.

SQL> 
SQL> -- this is meaningful in 10g only to prevent the 10g "multi-column join key sanity check" from masking the core algorithm
SQL> 
SQL> alter session set "_optimizer_join_sel_sanity_check"=false;

Session altered.

SQL> 
SQL> --alter session set events '10053 trace name context forever, level 1';
SQL> set autotrace traceonly explain
SQL> 
SQL> select /*+ ordered use_nl(t2) singletest */ t1.*, t2.*
  2    from t1, t2
  3   where t1.x = t2.x
  4     and t1.y = t2.y
  5     and t1.filter < &cbo_card_filt_t1.
  6     and t2.filter < &cbo_card_filt_t2.
  7  ;

Execution Plan
----------------------------------------------------------
Plan hash value: 1967407726

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |    29 |   464 |    49   (3)| 00:00:01 |
|   1 |  NESTED LOOPS      |      |    29 |   464 |    49   (3)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| T1   |    50 |   400 |     3   (0)| 00:00:01 |
|*  3 |   TABLE ACCESS FULL| T2   |     1 |     8 |     1   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("T1"."FILTER"<50)
   3 - filter("T2"."FILTER"<100 AND "T1"."X"="T2"."X" AND
              "T1"."Y"="T2"."Y")

SQL> set autotrace off
SQL> alter session set events '10053 trace name context off';

Session altered.

SQL> 
SQL> -- histograms on both the joined columns
SQL> --exec dbms_stats.gather_table_stats (user, 't1', cascade=>true, method_opt => 'for all columns size 254', estimate_percent=>100);
SQL> --exec dbms_stats.gather_table_stats (user, 't2', cascade=>true, method_opt => 'for all columns size 254', estimate_percent=>100);
SQL> -- histograms on only the first  join pred (t1.x = t2.x)
SQL> exec dbms_stats.gather_table_stats (user, 't1', cascade=>true, method_opt => 'for columns x size 254, y size 1, filter size 254', estimate_percent=>100);

PL/SQL procedure successfully completed.

SQL> exec dbms_stats.gather_table_stats (user, 't2', cascade=>true, method_opt => 'for columns x size 254, y size 1, filter size 254', estimate_percent=>100);

PL/SQL procedure successfully completed.

SQL> -- histograms on only the second  join pred (t1.y = t2.y )
SQL> --exec dbms_stats.gather_table_stats (user, 't1', cascade=>true, method_opt => 'for columns x size 1, y size 254, filter size 254', estimate_percent=>100);
SQL> --exec dbms_stats.gather_table_stats (user, 't2', cascade=>true, method_opt => 'for columns x size 1, y size 254, filter size 254', estimate_percent=>100);
SQL> 
SQL> 
SQL> alter session set events '10053 trace name context forever, level 1';

Session altered.

SQL> set autotrace traceonly explain
SQL> 
SQL> prompt only the first  join pred (t1.x = t2.x)
only the first  join pred (t1.x = t2.x)
SQL> select /*+ ordered use_nl(t2) singletest only_x  */ t1.*, t2.*
  2    from t1, t2
  3   where t1.x = t2.x
  4     --and t1.y = t2.y
  5     and t1.filter < &cbo_card_filt_t1.
  6     and t2.filter < &cbo_card_filt_t2.
  7  ;

Execution Plan
----------------------------------------------------------
Plan hash value: 1967407726

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |   737 | 11792 |    49   (3)| 00:00:01 |
|   1 |  NESTED LOOPS      |      |   737 | 11792 |    49   (3)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| T1   |    50 |   400 |     3   (0)| 00:00:01 |
|*  3 |   TABLE ACCESS FULL| T2   |    15 |   120 |     1   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("T1"."FILTER"<50)
   3 - filter("T2"."FILTER"<100 AND "T1"."X"="T2"."X")

SQL> 
SQL> prompt only the second join pred (t1.y = t2.y)
only the second join pred (t1.y = t2.y)
SQL> select /*+ ordered use_nl(t2) singletest only_y */ t1.*, t2.*
  2    from t1, t2
  3   where --t1.x = t2.x
  4         t1.y = t2.y
  5     and t1.filter < &cbo_card_filt_t1.
  6     and t2.filter < &cbo_card_filt_t2.
  7  ;

Execution Plan
----------------------------------------------------------
Plan hash value: 1967407726

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |   167 |  2672 |    49   (3)| 00:00:01 |
|   1 |  NESTED LOOPS      |      |   167 |  2672 |    49   (3)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| T1   |    50 |   400 |     3   (0)| 00:00:01 |
|*  3 |   TABLE ACCESS FULL| T2   |     3 |    24 |     1   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("T1"."FILTER"<50)
   3 - filter("T2"."FILTER"<100 AND "T1"."Y"="T2"."Y")

SQL> 
SQL> 
SQL> prompt both join pred
both join pred
SQL> select /*+ ordered use_nl(t2) singletest both */ t1.*, t2.*
  2    from t1, t2
  3   where t1.x = t2.x
  4     and t1.y = t2.y
  5     and t1.filter < &cbo_card_filt_t1.
  6     and t2.filter < &cbo_card_filt_t2.
  7  ;

Execution Plan
----------------------------------------------------------
Plan hash value: 1967407726

---------------------------------------------------------------------------
| Id  | Operation          | Name | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------
|   0 | SELECT STATEMENT   |      |    43 |   688 |    49   (3)| 00:00:01 |
|   1 |  NESTED LOOPS      |      |    43 |   688 |    49   (3)| 00:00:01 |
|*  2 |   TABLE ACCESS FULL| T1   |    50 |   400 |     3   (0)| 00:00:01 |
|*  3 |   TABLE ACCESS FULL| T2   |     1 |     8 |     1   (0)| 00:00:01 |
---------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("T1"."FILTER"<50)
   3 - filter("T2"."FILTER"<100 AND "T1"."X"="T2"."X" AND
              "T1"."Y"="T2"."Y")

SQL> set autotrace off
SQL> alter session set events '10053 trace name context off';

Session altered.

SQL> 
SQL> select min(x), max(x), min(y), max(y) from t1;

    MIN(X)     MAX(X)     MIN(Y)     MAX(Y)
---------- ---------- ---------- ----------
         0          1          0         16

1 row selected.

SQL> select min(x), max(x), min(y), max(y) from t2;

    MIN(X)     MAX(X)     MIN(Y)     MAX(Y)
---------- ---------- ---------- ----------
         0          9          0         31

1 row selected.

SQL> 
SQL> select t.table_name, c.column_name, c.num_distinct, c.num_buckets,
  2         exp_dist_balls_uniform ( c.num_distinct, decode (c.table_name, 'T1', &cbo_card_filt_t1., 'T2', &cbo_card_filt_t2.), t.num_rows ) f_num_distinct
  3   from user_tab_columns c, user_tables t
  4   where t.table_name in ('T1','T2')
  5     and t.table_name = c.table_name
  6     and c.column_name in ('X', 'Y', 'FILTER')
  7   order by column_name, table_name;

TABLE_NAME           COLUMN_NAME          NUM_DISTINCT NUM_BUCKETS F_NUM_DISTINCT
-------------------- -------------------- ------------ ----------- --------------
T1                   FILTER                        100         100             50
T2                   FILTER                        100         100            100
T1                   X                               2           2              2
T2                   X                              10          10             10
T1                   Y                              17           1     16.7437574
T2                   Y                              30           1             30

6 rows selected.

SQL> 
SQL> doc
SQL> exit
